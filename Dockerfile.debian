FROM debian:bullseye-slim

# Arguments for dynamic versioning
ARG NODE_VERSION=20
ARG N8N_VERSION=latest
ARG NVM_VERSION=0.39.3

# Set environment variables
ENV NODE_ENV=production \
    N8N_PATH=/ \
    GENERIC_TIMEZONE=Europe/London \
    TZ=Europe/London \
    DEBIAN_FRONTEND=noninteractive \
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable \
    CHROME_BIN=/usr/bin/google-chrome-stable \
    CHROME_PATH=/usr/lib/google-chrome/

# Install base dependencies
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    ca-certificates \
    procps \
    libgtk2.0-0 \
    libgtk-3-0 \
    libgbm-dev \
    libnotify-dev \
    libgconf-2-4 \
    libnss3 \
    libxss1 \
    libasound2 \
    libxtst6 \
    xauth \
    xvfb \
    tini \
    graphicsmagick \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Chrome
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Create node user and set up directories
RUN useradd -ms /bin/bash node
RUN mkdir -p /home/node/.n8n && chown -R node:node /home/node/.n8n

# Switch to node user
USER node
WORKDIR /home/node

# Install NVM
ENV NVM_DIR /home/node/.nvm
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v$NVM_VERSION/install.sh | bash

# Install Node.js and npm
RUN . $NVM_DIR/nvm.sh && \
    nvm install $NODE_VERSION && \
    nvm alias default $NODE_VERSION && \
    nvm use default

# Add node and npm to path so the commands are available
ENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules
ENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

# Install n8n and full-icu
RUN npm install -g n8n@${N8N_VERSION} full-icu && npm cache clean --force

# Set up environment for n8n
ENV NODE_ICU_DATA /home/node/.nvm/versions/node/v$NODE_VERSION/lib/node_modules/full-icu

# Copy and set permissions for entrypoint script
COPY --chown=node:node docker-entrypoint.sh /home/node/
RUN chmod +x /home/node/docker-entrypoint.sh

# Expose n8n port
EXPOSE 5678

# Verify n8n installation
RUN n8n --version

ENTRYPOINT ["tini", "--", "/home/node/docker-entrypoint.sh"]
CMD ["n8n", "start"]
