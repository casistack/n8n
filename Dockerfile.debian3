# Use ARG at the top level for use across multiple stages
ARG NODE_VERSION=20.15.0

# 1. Create an image to build n8n
FROM node:${NODE_VERSION}-bullseye-slim AS builder

# Set ARGs and ENVs
ARG N8N_VERSION
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Install necessary build tools and dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    python3 \
    git \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Install pnpm
RUN npm install -g pnpm

WORKDIR /usr/src/app

# Copy package.json, pnpm files, and patches first
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY patches ./patches

# Install all dependencies (including devDependencies)
RUN pnpm install --frozen-lockfile

# Copy the rest of the source code
COPY . .

# Build the application
RUN pnpm build

# Install production dependencies
RUN pnpm install --prod --frozen-lockfile

# 2. Create the final image
FROM node:${NODE_VERSION}-bullseye-slim

ARG N8N_VERSION
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV} \
    N8N_VERSION=${N8N_VERSION} \
    N8N_METRICS=${N8N_METRICS} \
    NODE_VERSION=${NODE_VERSION} \
    PNPM_HOME="/root/.local/share/pnpm" \
    PATH="$PNPM_HOME:$PATH" \
    N8N_PATH=/usr/local/lib/node_modules/n8n \
    N8N_CONFIG_FILES=/root/.n8n/config.json \
    GENERIC_TIMEZONE=Europe/London \
    TZ=Europe/London \
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium \
    CHROME_BIN=/usr/bin/chromium \
    CHROME_PATH=/usr/lib/chromium/

# Install necessary tools and dependencies
RUN apt-get update && apt-get install -y \
    graphicsmagick \
    tini \
    chromium \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install pnpm
RUN npm install -g pnpm

WORKDIR /usr/src/app

# Copy built n8n from builder stage
COPY --from=builder /usr/src/app ./

# Set up n8n
RUN ln -s /usr/src/app/packages/cli/bin/n8n /usr/bin/n8n

# Copy custom entrypoint script
COPY docker-entrypoint-debian2.sh /
RUN chmod +x /docker-entrypoint-debian2.sh

# Healthcheck so that the container can be restarted if n8n stops running
HEALTHCHECK --interval=30s --timeout=3s --retries=3 --start-period=10s \
  CMD curl -f 'http://localhost:5678/healthz' || exit 1

EXPOSE 5678/tcp

ENTRYPOINT ["tini", "--", "/docker-entrypoint-debian2.sh"]

CMD ["n8n", "start"]
