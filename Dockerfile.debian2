# This line ensures that any prepended environment variables don't cause a parse error
#FROM scratch AS empty

# 1. Create an image to build n8n
FROM --platform=linux/amd64 debian:bullseye-slim AS builder

# Use ARG to set NODE_VERSION in this build stage
ARG NODE_VERSION=20.15.0
ARG N8N_VERSION=latest
RUN echo "Building with Node.js version at line 9: $NODE_VERSION"

# Install Node.js and necessary build tools
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    build-essential \
    python3 \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g npm@latest pnpm \
    && rm -rf /var/lib/apt/lists/*

# Install jq for JSON processing
RUN apt-get update && apt-get install -y jq && rm -rf /var/lib/apt/lists/*

# Build the application from source
WORKDIR /src
COPY . /src
RUN --mount=type=cache,id=pnpm-store,target=/root/.local/share/pnpm/store --mount=type=cache,id=pnpm-metadata,target=/root/.cache/pnpm/metadata pnpm install --frozen-lockfile
RUN pnpm build

# Delete all dev dependencies
RUN jq 'del(.pnpm.patchedDependencies)' package.json > package.json.tmp && mv package.json.tmp package.json
RUN node .github/scripts/trim-fe-packageJson.js

# Delete any source code, source-mapping, or typings
RUN find . -type f -name "*.ts" -o -name "*.js.map" -o -name "*.vue" -o -name "tsconfig.json" -o -name "*.tsbuildinfo" | xargs rm -rf


# Deploy the `n8n` package into /compiled
RUN mkdir /compiled
RUN NODE_ENV=production pnpm --filter=n8n --prod --no-optional deploy /compiled

# 2. Create the Debian-based image with just the code needed to run n8n
FROM debian:bullseye-slim

ARG NODE_VERSION
ARG N8N_VERSION
RUN echo "Running with Node.js version: $NODE_VERSION and n8n version at line 47: $N8N_VERSION"

ENV NODE_ENV=production
ENV N8N_VERSION=${N8N_VERSION}
ENV NODE_VERSION=${NODE_VERSION}

# Set environment variables as in your docker-compose.yaml
ENV N8N_PATH=/ \
    GENERIC_TIMEZONE=Europe/London \
    TZ=Europe/London \
    DEBIAN_FRONTEND=noninteractive \
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium \
    CHROME_BIN=/usr/bin/chromium \
    CHROME_PATH=/usr/lib/chromium/

# Install Node.js and other necessary tools
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    tini \
    chromium \
    libgtk2.0-0 \
    libgtk-3-0 \
    libgbm-dev \
    libnotify-dev \
    libgconf-2-4 \
    libnss3 \
    libxss1 \
    libasound2 \
    libxtst6 \
    xauth \
    xvfb \
    graphicsmagick \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g npm@latest \
    && rm -rf /var/lib/apt/lists/*

# Create node user and set up directories
RUN useradd -ms /bin/bash node
WORKDIR /home/node

# Copy n8n from builder stage
COPY --from=builder /compiled /usr/local/lib/node_modules/n8n

# Copy custom entrypoint script
COPY docker-entrypoint-debian2.sh /
RUN chmod +x /docker-entrypoint-debian2.sh

# Set up n8n
RUN cd /usr/local/lib/node_modules/n8n && npm rebuild sqlite3 && cd - \
    && ln -s /usr/local/lib/node_modules/n8n/bin/n8n /usr/local/bin/n8n \
    && mkdir .n8n \
    && chown -R node:node .n8n

# Create custom nodes directory
#RUN mkdir -p /home/node/.n8n/custom && chown -R node:node /home/node/.n8n

ENV SHELL=/bin/bash

USER node

# Expose n8n port
EXPOSE 5678

ENTRYPOINT ["tini", "--", "/docker-entrypoint-debian2.sh"]
CMD ["n8n", "start"]
